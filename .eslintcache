[{"D:\\My_Code\\personal-website\\src\\index.js":"1","D:\\My_Code\\personal-website\\src\\App.js":"2","D:\\My_Code\\personal-website\\src\\components\\MainView.js":"3","D:\\My_Code\\personal-website\\src\\components\\MainPath.js":"4","D:\\My_Code\\personal-website\\src\\configures\\models.js":"5","D:\\My_Code\\personal-website\\src\\configures\\units.js":"6","D:\\My_Code\\personal-website\\src\\configures\\texts.js":"7","D:\\My_Code\\personal-website\\src\\components\\SteeringEntity.js":"8","D:\\My_Code\\personal-website\\src\\components\\Entity.js":"9","D:\\My_Code\\personal-website\\src\\components\\Character.js":"10"},{"size":219,"mtime":1608902422560,"results":"11","hashOfConfig":"12"},{"size":288,"mtime":1609076164004,"results":"13","hashOfConfig":"12"},{"size":15762,"mtime":1610390855879,"results":"14","hashOfConfig":"12"},{"size":141,"mtime":1608971479411,"results":"15","hashOfConfig":"12"},{"size":2401,"mtime":1609772085808,"results":"16","hashOfConfig":"12"},{"size":5392,"mtime":1610390967226,"results":"17","hashOfConfig":"12"},{"size":7152,"mtime":1609510211952,"results":"18","hashOfConfig":"12"},{"size":2470,"mtime":1610390825596,"results":"19","hashOfConfig":"12"},{"size":1462,"mtime":1610385294876,"results":"20","hashOfConfig":"12"},{"size":1950,"mtime":1610385302201,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"19qlbtb",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\My_Code\\personal-website\\src\\index.js",[],["44","45"],"D:\\My_Code\\personal-website\\src\\App.js",[],"D:\\My_Code\\personal-website\\src\\components\\MainView.js",["46","47","48","49"],"import { useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\nimport { MODELS } from '../configures/models';\r\nimport { UNITS } from '../configures/units';\r\nimport { TEXTS_INTRO,TEXTS_AWARD } from '../configures/texts';\r\nimport { SteeringEntity } from '../components/SteeringEntity';\r\nimport { Entity } from '../components/Entity';\r\nimport { Character } from '../components/Character';\r\n\r\nconst MainView = (src) => {\r\n    useEffect(() => {\r\n        var worldScene,camera,renderer,clock;\r\n        var groundMesh;\r\n        var mixers = [];\r\n        var Obstacles = [], SteeringEntities = [], mainCharacter;\r\n        var hasBeen = {};\r\n        var boundingGround;\r\n\r\n        const InitScene = () => {\r\n            //worldScene\r\n            worldScene = new THREE.Scene();\r\n            worldScene.background = new THREE.Color(0xDDFFFD);\r\n\r\n            //camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\r\n            //camera.position.set(0, 1, 3);\r\n            camera.position.set(0, 13, 13);\r\n            //camera.lookAt(10,1,3);\r\n            camera.lookAt(worldScene.position);\r\n\r\n            //light \r\n            const HemisphereLight = new THREE.HemisphereLight( 0xFFF6DD, 0x05050C, 1.1 );\r\n            worldScene.add(HemisphereLight);\r\n\r\n            const sunLight = new THREE.DirectionalLight(0xFEE8C9, 1);\r\n            sunLight.position.set(-7,10,-7);\r\n            sunLight.target.position.set(0,0,0);\r\n            sunLight.castShadow = true;\r\n            sunLight.shadow.mapSize.width = 4096;\r\n            sunLight.shadow.mapSize.height = 4096;\r\n            sunLight.shadow.camera.top = 20;\r\n\t\t\tsunLight.shadow.camera.bottom = - 20;\r\n\t\t\tsunLight.shadow.camera.left = - 20;\r\n\t\t\tsunLight.shadow.camera.right = 20;\r\n\t\t\tsunLight.shadow.camera.near = 0.1;\r\n\t\t\tsunLight.shadow.camera.far = 100;\r\n            worldScene.add(sunLight);\r\n\r\n            //clock \r\n            clock = new THREE.Clock()\r\n\r\n            //Oxyz\r\n            const lineMatX = new THREE.LineBasicMaterial({color: 0xFF0000}); //red\r\n            const lineMatY = new THREE.LineBasicMaterial({color: 0xABFF00}); //green\r\n            const lineMatZ = new THREE.LineBasicMaterial({color: 0x0016FF}); //blue\r\n            const pointO = new THREE.Vector3(0,0,0);\r\n\r\n            const pointsX = [];\r\n            pointsX.push(pointO);\r\n            pointsX.push(new THREE.Vector3(10,0,0));\r\n            const lineGeoX = new THREE.BufferGeometry().setFromPoints(pointsX);\r\n\r\n            const pointsY = [];\r\n            pointsY.push(pointO);\r\n            pointsY.push(new THREE.Vector3(0,10,0));\r\n            const lineGeoY = new THREE.BufferGeometry().setFromPoints(pointsY);\r\n\r\n            const pointsZ = [];\r\n            pointsZ.push(pointO);\r\n            pointsZ.push(new THREE.Vector3(0,0,10));\r\n            const lineGeoZ = new THREE.BufferGeometry().setFromPoints(pointsZ); \r\n\r\n            const Ox = new THREE.Line(lineGeoX, lineMatX);\r\n            const Oy = new THREE.Line(lineGeoY, lineMatY);\r\n            const Oz = new THREE.Line(lineGeoZ, lineMatZ);\r\n            worldScene.add(Ox);\r\n            worldScene.add(Oy);\r\n            worldScene.add(Oz);\r\n\r\n            //ground \r\n            const groundGeo = new THREE.PlaneBufferGeometry(20,12);\r\n            const groundMat = new THREE.MeshPhongMaterial({ color: 0xA55001});\r\n            groundMesh = new THREE.Mesh(groundGeo,groundMat);\r\n            groundMesh.rotation.x = -Math.PI/2;\r\n            groundMesh.position.z += 4;\r\n            groundMesh.receiveShadow = true;\r\n            worldScene.add(groundMesh);\r\n\r\n            boundingGround = new THREE.Box3(new THREE.Vector3(-8,0,-1), new THREE.Vector3(8,0,8));\r\n\r\n            //text\r\n            var loader = new THREE.FontLoader();\r\n            for (let i=0; i<TEXTS_INTRO.length; i++) {\r\n                let textGeo;\r\n                loader.load('./fonts/Sketch_3D_Regular.json', (font) => {\r\n                    textGeo = new THREE.TextGeometry(TEXTS_INTRO[i].text, {\r\n                        font : font,\r\n                        size: TEXTS_INTRO[i].size,\r\n                        height: TEXTS_INTRO[i].height,\r\n                        curveSegments: TEXTS_INTRO[i].curveSegments,\r\n                        bevelEnabled: TEXTS_INTRO[i].bevelEnabled,\r\n                        bevelThickness: TEXTS_INTRO[i].bevelThickness,\r\n                        bevelSize: TEXTS_INTRO[i].bevelSize,\r\n                        bevelSegments: TEXTS_INTRO[i].bevelSegments\r\n                    })\r\n\r\n                    let textMat = new THREE.MeshPhongMaterial({ color: 0xF0E1D1 });\r\n                    let textMesh = new THREE.Mesh(textGeo, textMat);\r\n                    var textEntity = new Entity(textMesh,0);\r\n                    textEntity.position.set(TEXTS_INTRO[i].position.x,TEXTS_INTRO[i].position.y,TEXTS_INTRO[i].position.z);\r\n                    if (TEXTS_INTRO[i].rotation) {\r\n                        textEntity.rotation.set(TEXTS_INTRO[i].rotation.x,TEXTS_INTRO[i].rotation.y,TEXTS_INTRO[i].rotation.z);\r\n                    }\r\n                    textEntity.castShadow = true;\r\n                    textEntity.receiveShadow = true;\r\n\r\n                    Obstacles.push(textEntity);\r\n                    worldScene.add(textEntity);\r\n                });\r\n            }\r\n\r\n            for (let i=0; i<TEXTS_AWARD.length; i++) {\r\n                let textGeo;\r\n                loader.load('./fonts/Bakso.json', (font) => {\r\n                    textGeo = new THREE.TextGeometry(TEXTS_AWARD[i].text, {\r\n                        font : font,\r\n                        size: TEXTS_AWARD[i].size,\r\n                        height: TEXTS_AWARD[i].height,\r\n                        curveSegments: TEXTS_AWARD[i].curveSegments,\r\n                        bevelEnabled: false\r\n                    })\r\n\r\n                    let textMat = new THREE.MeshPhongMaterial({ color: 0x5F1515 });\r\n                    let textMesh = new THREE.Mesh(textGeo, textMat);\r\n\r\n                    var textEntity = new Entity(textMesh,0);\r\n                    textEntity.position.set(TEXTS_AWARD[i].position.x,TEXTS_AWARD[i].position.y,TEXTS_AWARD[i].position.z);\r\n                    if (TEXTS_AWARD[i].rotation) {\r\n                        textEntity.rotation.set(TEXTS_AWARD[i].rotation.x,TEXTS_AWARD[i].rotation.y,TEXTS_AWARD[i].rotation.z);\r\n                    }\r\n                    textEntity.castShadow = true;\r\n                    textEntity.receiveShadow = true;\r\n\r\n                    Obstacles.push(textEntity);\r\n                    worldScene.add(textEntity);\r\n                });\r\n            }\r\n\r\n\r\n            //resize event\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n        }\r\n        \r\n        const InitRenderer = () => {\r\n            //renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true});\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            renderer.shadowMap.enabled = true;\r\n            renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n            renderer.gammaOutput = true;\r\n            document.getElementById(src).appendChild(renderer.domElement);\r\n        }\r\n\r\n        const LoadModels = () => {\r\n            var num=0;\r\n            for (let i=0; i< MODELS.length; i++) {\r\n                const model = MODELS[i];\r\n                loadGLTFModel(model , () => {\r\n                    num++;\r\n\r\n                    if (num===MODELS.length) {\r\n                        InitiateUnits();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const GetModelByName = (unitName) => {\r\n            for (let i=0; i<MODELS.length; i++) {\r\n                if (unitName.includes(MODELS[i].name)) {\r\n                    return MODELS[i];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        const InitiateUnits = () => {\r\n            for (let i=0; i<UNITS.length; i++) {\r\n\r\n                const unit = UNITS[i];\r\n                const model = GetModelByName(unit.name);\r\n\r\n                if (model) {\r\n                    var unitScene;\r\n                    if (unit.specific) {\r\n                        model.scene.traverse((obj) => {\r\n                            if (obj.isMesh) {\r\n                                if (obj.name[0] === unit.specific) {\r\n                                    unitScene = obj;\r\n                                }\r\n                            }\r\n                        })\r\n                    } else { /* Need clone deeper if wanna clone animated mesh */\r\n                        if (hasBeen[model.name]) {\r\n                            unitScene = model.scene.clone();\r\n                        } else {\r\n                            unitScene = model.scene;\r\n                            hasBeen[model.name] = true;\r\n                        }\r\n                    }\r\n\r\n                    const modelAnimations = model.animations;\r\n\r\n                    var unitEntity;\r\n                    var type;\r\n                    if (unit.entity_type === 'Steering' || unit.entity_type === 'Main_character') {\r\n                        if (unit.entity_type === 'Steering') {\r\n                            unitEntity = new SteeringEntity(unitScene,unit.name,unit.maxSpeed,\r\n                                                            unit.wanderDistance,unit.wanderAngle,\r\n                                                            unit.wanderRadius,unit.wanderRange);\r\n                            type = 0;\r\n                        } else {\r\n                            unitEntity = new Character(unitScene,unit.maxSpeed);\r\n                            type = 1;\r\n                        }\r\n                    } \r\n                    else if (unit.entity_type === 'Obstacle') {\r\n                        unitEntity = new Entity(unitScene,0);\r\n                        type = 2;\r\n                    } \r\n                    else {\r\n                        unitEntity = unitScene;\r\n                        type = 3;\r\n                    }\r\n\r\n                    if (unit.position) {\r\n                        unitEntity.position.set(unit.position.x, unit.position.y, unit.position.z);\r\n                    }\r\n\r\n                    if (unit.scale) {\r\n                        unitEntity.scale.set(unit.scale, unit.scale, unit.scale);\r\n                    }\r\n\r\n                    if (unit.rotation) {\r\n                        unitEntity.rotation.set(unit.rotation.x, unit.rotation.y, unit.rotation.z)\r\n                    }\r\n\r\n                    if (unit.animation) {\r\n                        const mixer = StartAnimation(unitEntity, modelAnimations, unit.animation);\r\n                        mixers.push(mixer);\r\n                    }\r\n\r\n                    if (type === 0) {\r\n                        SteeringEntities.push(unitEntity);\r\n                    } \r\n                    else if (type === 1) {\r\n                        mainCharacter = unitEntity;\r\n                    }\r\n                    else if (type === 2) {\r\n                        Obstacles.push(unitEntity);\r\n                    }\r\n                    \r\n                    worldScene.add(unitEntity);\r\n\r\n                } else {\r\n                    console.error(\"not found model\");\r\n                }\r\n            }\r\n        }\r\n\r\n        const loadGLTFModel = (model, onLoad) => {\r\n            const loader = new GLTFLoader();\r\n            const url_model = model.url;\r\n            //console.log('load model from ' + url_model);\r\n\r\n            loader.load(url_model, (gltf) => {\r\n\r\n                gltf.scene.traverse((obj) => {\r\n                    if (obj.isMesh) {\r\n                        obj.castShadow = model.castShadow;\r\n                        obj.receiveShadow = model.receiveShadow;\r\n                    }\r\n                })\r\n\r\n                model.scene = gltf.scene;\r\n                model.animations = gltf.animations;\r\n                if (model.name === 'cat' | model.name==='cutie') console.log(model.animations);\r\n\r\n                onLoad();\r\n            })\r\n        }\r\n\r\n        const StartAnimation = (mesh, animations, animationName) => {\r\n            const mixer = new THREE.AnimationMixer(mesh);\r\n            const clip = THREE.AnimationClip.findByName(animations, animationName);\r\n\r\n            //console.log(clip);\r\n            \r\n            if (clip) {\r\n                const action = mixer.clipAction(clip);\r\n                action.play();\r\n            }\r\n\r\n            return mixer;\r\n        }\r\n\r\n        const gameLogic = () => {\r\n            if (mainCharacter) {\r\n                mainCharacter.lookWhereGoing();\r\n                mainCharacter.update();\r\n            }\r\n\r\n            for (let i=0;i<SteeringEntities.length;i++) {\r\n                var steeringObj = SteeringEntities[i];\r\n                steeringObj.wander(boundingGround);\r\n                if (steeringObj.name === 'cat') {\r\n                    steeringObj.lookWhereGoing();\r\n                }\r\n                steeringObj.bounce(boundingGround);\r\n                steeringObj.update();\r\n            }\r\n        }\r\n\r\n        var dt = 1000/60;\r\n        var timetarget = 0;\r\n\r\n        const animate = () => {\r\n            if (Date.now() >= timetarget) {\r\n\r\n                const mixerUpdateDelta = clock.getDelta();\r\n\r\n                for (let i=0; i<mixers.length; i++) {\r\n                    mixers[i].update(mixerUpdateDelta);\r\n                }\r\n\r\n                gameLogic();\r\n                \r\n                renderer.render(worldScene, camera);\r\n\r\n                timetarget += dt;\r\n                if (Date.now() >= timetarget) {\r\n                    timetarget = Date.now();\r\n                }\r\n            }\r\n\r\n            requestAnimationFrame(animate);\r\n        }\r\n\r\n        const onWindowResize = () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        const onPushKeyboard = (event) => {\r\n            var keyName = event.key;\r\n            //console.log(keyName);\r\n            if (keyName === 'w') {\r\n                mainCharacter.moveUp();\r\n            } else if (keyName === 's') {\r\n                mainCharacter.moveDown();\r\n            } else if (keyName === 'a') {\r\n                mainCharacter.moveLeft();\r\n            } else if (keyName === 'd') {\r\n                mainCharacter.moveRight();\r\n            }\r\n            \r\n        }\r\n\r\n        const onReleaseKeyboard = (event) => {\r\n            var keyName = event.key;\r\n            //console.log(keyName);\r\n            if (keyName === 'w') {\r\n                mainCharacter.unMoveUp();\r\n            } else if (keyName === 's') {\r\n                mainCharacter.unMoveDown();\r\n            } else if (keyName === 'a') {\r\n                mainCharacter.unMoveLeft();\r\n            } else if (keyName === 'd') {\r\n                mainCharacter.unMoveRight();\r\n            }\r\n        }\r\n\r\n        const onPressKeyboard = (event) => {\r\n            var keyName = event.key;\r\n            if (keyName === ' ') {\r\n                mainCharacter.jumpUp();\r\n            }\r\n        }\r\n\r\n        //main prog\r\n        InitScene(); \r\n        InitRenderer();\r\n        LoadModels();\r\n        document.addEventListener('keydown',onPushKeyboard,false);\r\n        document.addEventListener('keyup',onReleaseKeyboard,false);\r\n        document.addEventListener('keypress',onPressKeyboard,false);\r\n        animate();\r\n\r\n        return () => {\r\n            document.getElementById(src).removeChild(renderer.domElement);\r\n        }\r\n    }, [src])\r\n}\r\n\r\nexport default MainView;","D:\\My_Code\\personal-website\\src\\components\\MainPath.js",[],"D:\\My_Code\\personal-website\\src\\configures\\models.js",[],"D:\\My_Code\\personal-website\\src\\configures\\units.js",[],"D:\\My_Code\\personal-website\\src\\configures\\texts.js",[],"D:\\My_Code\\personal-website\\src\\components\\SteeringEntity.js",[],"D:\\My_Code\\personal-website\\src\\components\\Entity.js",[],"D:\\My_Code\\personal-website\\src\\components\\Character.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":97,"column":63,"nodeType":"56","messageId":"57","endLine":121,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":126,"column":51,"nodeType":"56","messageId":"57","endLine":148,"endColumn":18},{"ruleId":"54","severity":1,"message":"58","line":172,"column":39,"nodeType":"56","messageId":"57","endLine":178,"endColumn":18},{"ruleId":"54","severity":1,"message":"59","line":201,"column":46,"nodeType":"56","messageId":"57","endLine":207,"endColumn":26},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'worldScene'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'num', 'num'.","Function declared in a loop contains unsafe references to variable(s) 'unitScene'.","no-global-assign","no-unsafe-negation"]